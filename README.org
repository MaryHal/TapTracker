* TapTracker  [[https://travis-ci.org/sanford1/TapTracker][https://travis-ci.org/sanford1/TapTracker.svg?branch=master]] :TOC_5_gh:
   - [[#about][About]]
   - [[#building-taptracker][Building TapTracker]]
   - [[#running-taptracker][Running TapTracker]]
   - [[#screenshots][Screenshots]]
   - [[#to-do-list][To-do list]]
   - [[#appendix][Appendix]]
     - [[#tap-tgm2p][TAP (tgm2p)]]
       - [[#useful-ram-addresses][Useful RAM Addresses]]
       - [[#block-indices][Block Indices]]
       - [[#tgm2p-states][TGM2P States]]
         - [[#m-roll-flags][M-Roll Flags]]
         - [[#internal-state][Internal State]]
         - [[#game-mode][Game Mode]]
     - [[#tgm1-tgmj][TGM1 (tgmj)]]
       - [[#useful-ram-addresses][Useful RAM Addresses]]

** About

This project aims to log various game data (and inputs) during a game of [[https://en.wikipedia.org/wiki/Tetris:_The_Grand_Master][Tetris: The Grandmaster 2 Plus]] (TGM2p/TGM2+/TAP) when run in an emulator ([[http://mamedev.org/][MAME]]). TapTracker runs alongside the emulator and performs its logging in real-time. This is linux-only for now.

[[https://github.com/sanford1/BlockTracker][BlockTracker]] was my first attempt at this. It was done by interacting with [[https://github.com/scanmem/scanmem][scanmem]] as a child process. Ultimately, this meant every time I started up the game, I had to probe for the memory address holding level data (not unlike someone using [[http://www.cheatengine.org/][cheat-engine]]) then pass the proper memory addresses to BlockTracker. Along the way I wrote quite possibly the worst code I've ever written. Despite being such a small program, it wasn't too pleasant for me to look at and maintain. (There was one upside though: this method was game-agnostic; I could probe any TGM-style game for level data).

In contrast, TapTracker takes a more direct route by modifying a [[https://github.com/sanford1/shmupmametgm/][TGM-specific version of MAME]] to output relevant data. You can also build TapTracker MAME like so:

#+BEGIN_SRC sh
  git clone https://github.com/sanford1/shmupmametgm.git
  make SUBTARGET=tgm NOWERROR=1
#+END_SRC

** Building TapTracker

First things first, get the source code from this repository:

#+BEGIN_SRC sh
  git clone https://github.com/sanford1/TapTracker.git
#+END_SRC

After cloning, enter the created directory and retrieve all the submodules:

#+BEGIN_SRC sh
  git submodule update --init --recursive
#+END_SRC

Building this project requires [[https://www.python.org/][python]], [[https://martine.github.io/ninja/][ninja]], and [[http://www.glfw.org/][glfw3]]:

#+BEGIN_SRC sh
  python bootstrap.py
  ninja
#+END_SRC

Alternatively, if you trust me enough, you can find a "stable" build [[https://github.com/sanford1/TapTracker/releases/latest][here]].

** Running TapTracker

TapTracker no longer runs shmupmametgm as a child process, but TapTracker must be run /after/ shmupmametgm has started. For now, TapTracker only logs stats for player 1. You must also [[https://github.com/sanford1/shmupmametgm/#taptracker][enable TapTracker]] in /modded/ shmupmametgm with the =-taptracker= switch or the correct option in your mame.ini.

There is some shoehorned command line arguments to enable joystick support/set joystick buttons:

#+BEGIN_SRC sh
  Usage: ./TapTracker [options] [arguments]

  Options:
    --j       Set joystick index for input display. If negative, disable joystick support. (-1)
    --a       Set index for button A. (1)
    --b       Set index for button B. (2)
    --c       Set index for button C. (3)
    --h       Set index for horizontal axis. (6)
    --v       Set index for vertical axis. (7)
    --version Output version
    --help    Output help

  Example:
    ./TapTracker --j 0 --a 0 --b 1 --c 2
#+END_SRC

** Screenshots

UI is still a work-in-progress.

| [[screenshot05.png ]]| [[screenshot03.png]] | [[screenshot04.png]] |

The top portion graphs the time vs level during the last three sections. Below that is a table listing section times (newer, more speedrun-timer-like layout on the left). If joystick support is enabled, a second window is opened that displays joystick inputs per level (no keyboard support yet).

[[https://www.youtube.com/watch?v=6sReyaKpt70][Video of TapTracker (without input viewer)]]

[[https://www.youtube.com/watch?v=NTJTRTVM19w][Old Video of BlockTracker]]

** To-do list

- [Partially complete] Document TAP states :: I've reverse engineered most of the TGM2+ states (read: I've figured out what they mean), but there may be edge cases that still confuse TapTracker.
- [Partially complete] Implement resizable layouts :: TapTracker only supports a single window size and layout right now, and it's difficult to modify.
- [Partially complete] Rework OpenGL code :: It's rigid and messy right now. Not to mention it also uses a ton of immediate mode. There's an old git branch (gltest) that updates the 15-year-old rendering code to 14-year-old rendering code.
- Player 2 support :: Log stats for Player 2 too.
- +Diagram Generation+ :: Create a [[http://fumen.zui.jp/][Fumen]] diagram during play. A prototype (written in Python) can be found in the =autofumen= directory.
- +MAME patch for Windows+ :: ...
- More error logging :: Since in addition to the original TapTracker code, we have to reproduce some of tgm2p's game logic, there may be unforeseen edge cases. We probably should catch those.
- Config files (json?) :: For configurable layouts and to possibly replace the command line arguments.

** Appendix
*** TAP (tgm2p)
**** Useful RAM Addresses

All these addresses are for player 1. I still need to double check some of these.

- From a [[http://tetrisconcept.net/wiki/User:Zzymyn#Memory_Addresses][relatively hidden part]] of the TetrisConcept Wiki:

|    Address | Type      | Description                         | Notes           |
|------------+-----------+-------------------------------------+-----------------|
| 0x06064B99 | int8_t    | ARE/Line Clear Delay Time Remaining |                 |
| 0x06064BA8 | uint32_t  | Random Number Generator State       |                 |
| 0x06064BC8 | int32_t   | Score                               |                 |
| 0x06064BE1 | uint8_t   | DAS Counter                         | Can overflow(!) |
| 0x06064BE4 | int32_t   | Total Time                          |                 |
| 0x06064BE8 | int32_t   | Game Time                           |                 |
| 0x06064BF5 | int8_t    | Block State                         |                 |
| 0x06064BF6 | int16_t   | Current Block                       |                 |
| 0x06064BF8 | int16_t   | Next Block                          |                 |
| 0x06064BFC | int16_t   | Current Block X Position            |                 |
| 0x06064C00 | int16_t   | Current Block Y Position            |                 |
| 0x06064C02 | int8_t    | Gravity Left                        |                 |
| 0x06064C04 | int8_t[4] | Block History                       |                 |
| 0x06064C2A | int16_t   | RO Badge Score                      |                 |
| 0x06064C2C | int16_t   | Number of Blocks Rotated            |                 |
| 0x06064C2E | int16_t   | Current Block Rotation Count        |                 |
| 0x06064C34 | int16_t   | Current Block Alive Time            |                 |

- Extra:

|    Address | Type    | Description                  | Notes                              |
|------------+---------+------------------------------+------------------------------------|
| 0x06064BFA | int8_t  | Current Block Rotation State |                                    |
| 0x06064BBA | int16_t | Player 1 Level               |                                    |
| 0x06064BEA | int16_t | Player 1 Timer               |                                    |
| 0x06079378 | int8_t  | Internal Grade               |                                    |
| 0x06079379 | int8_t  | Internal Grade Points        |                                    |
| 0x06064BD0 | int8_t  | M-Roll Progress State        |                                    |
| 0x06066845 | int8_t  | M-Roll Flag                  |                                    |
| 0x06064C25 | int8_t  | Section Index                |                                    |
| 0x06064BA4 | int16_t | Current Game Mode            | See below for corresponding values |

**** Block Indices
| Index | Block |
|-------+-------|
|     2 | I     |
|     3 | Z     |
|     4 | S     |
|     5 | J     |
|     6 | L     |
|     7 | O     |
|     8 | T     |
**** TGM2P States
***** M-Roll Flags
| Value | Definition                                                                      |
|-------+---------------------------------------------------------------------------------|
|    17 | Failure state in the first half of the game (100-499).                          |
|    19 | Failure state in the second half of the game (500-999).                         |
|    31 | Failure state at the end of the game, currently in fading credit roll.          |
|    34 | Garbage value when the game is still loading.                                   |
|    48 | Neutral state. Value during the first section (0-100) and non-play game states. |
|    49 | Passing state during the first half of the game (100-499).                      |
|    51 | Passing state during the second half of the game (500-999).                     |
|   127 | Passing state at the end of the game, currently in the invisible credit roll.   |

***** Internal State
| Value | Definition                                        |
|-------+---------------------------------------------------|
|     0 |                                                   |
|     1 |                                                   |
|     2 | Tetromino can be controlled by the player.        |
|     3 | Tetromino cannot be influenced anymore.           |
|     4 | Tetromino is being locked to the playfield.       |
|     5 | Block entry delay (ARE).                          |
|     7 | "Game Over" is being shown on screen.             |
|    10 | No game has started, idle state.                  |
|    11 | Blocks are fading away when topping out (losing). |
|    13 | Blocks are fading away when completing a game.    |
|    71 | Garbage value when the game is still loading.     |

***** Game Mode
| Value          | Mode |
|----------------+------|
| No Game Mode   |    0 |
| Normal         |    1 |
| Master         |    2 |
| Doubles        |    4 |
| Normal Versus  |    9 |
| Master Versus  |   10 |
| Master Credits |   18 |
| Tgm+ Versus    |  136 |
| Tgm+           |  128 |
| Master Item    |  514 |
| Tgm+ Item      |  640 |
| Death          | 4096 |
| Death Versus   | 4104 |

This list may not be exhaustive just yet
*** TGM1 (tgmj)
**** Useful RAM Addresses
|    Address | Type    | Description    | Notes |
|------------+---------+----------------+-------|
| 0x0017699A | int16_t | Player 1 Level |       |
| 0x0017698C | int16_t | Player 1 Timer |       |
  
