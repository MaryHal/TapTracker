* TapTracker                                                       :TOC_3_gh:
   - [[#about][About]]
   - [[#building-taptracker][Building TapTracker]]
   - [[#running-taptracker][Running TapTracker]]
   - [[#screenshots][Screenshots]]
   - [[#to-do-list][To-do list]]
   - [[#appendix][Appendix]]
     - [[#useful-ram-addresses][Useful RAM Addresses]]
     - [[#block-indices][Block Indices]]

** About
This project aims to log various game data (and inputs) during a game of [[https://en.wikipedia.org/wiki/Tetris:_The_Grand_Master][Tetris: The Grandmaster 2 Plus]] (TGM2p/TGM2+/TAP) when run in an emulator ([[http://mamedev.org/][MAME]]). TapTracker runs alongside the emulator and performs its logging in real-time. This is linux-only for now.

[[https://github.com/sanford1/BlockTracker][BlockTracker]] was my first attempt at this. It was done by interacting with [[https://github.com/scanmem/scanmem][scanmem]] as a child process. Ultimately, this meant every time I started up the game, I had to probe for the memory address holding level data (not unlike someone using [[http://www.cheatengine.org/][cheat-engine]]) then pass the proper memory addresses to BlockTracker. Along the way I wrote quite possibly the worst code I've ever written. Despite being such a small program, it wasn't too pleasant for me to look at and maintain. (There's one upside though: this method was game-agnostic; I could probe any TGM-style game for level data).

In contrast, TapTracker takes a more direct route by modifying a version of MAME to output relevant data. Only a single file in the MAME source code has been changed ($MAME/src/emu/cpuexec.c). Keep in mind that if you want to build this from the bottom up, the go-to version of MAME for TGM is a [[http://tetrisconcept.net/wiki/Modded_MAME][modified version of shmupmame]]. The build process on Linux has a couple quirks, so I might write a build guide in the near future, but another user on [[http://tetrisconcept.net/][TetrisConcept.net]] went through a similar [[http://tetrisconcept.net/threads/shmupmametgm-on-linux.2645/#post-58103][process to build shmupmametgm]] for themself, which was more or less what I had done. Pre-built binaries of shmupmame with the TapTracker patches can be found in the [[https://github.com/sanford1/TapTracker/releases][here]]. I've also uploaded the patched source code [[https://www.dropbox.com/s/upjlanwa4xc2o02/linux_mametgm_mod.7z?dl=0][here]].

The patch uses debug functions in MAME, so debug functionality must be enabled with =-debug= or the =-c= switch (enables the cheat engine).

Another patch (=patch/src/mame/drivers/psikyosh.c.diff=) will modify TGM2+'s framerate to the correct ~61.681 hz and correct a bug regarding 4-way stick emulation. The file to-be-patched is at $MAME/src/mame/drivers/psikyosh.c.

The diffs in the =patch= directory can be applied via [[http://linux.die.net/man/1/patch][patch]].

** Building TapTracker

After cloning this repository, retrieve all the submodules:

#+BEGIN_SRC sh
  git submodule update --init --recursive
#+END_SRC

Building this project requires [[https://www.python.org/][python]], [[https://martine.github.io/ninja/][ninja]], and [[http://www.glfw.org/][glfw]]:

#+BEGIN_SRC sh
  python bootstrap.py
  ninja
#+END_SRC

** Running TapTracker

TapTracker no longer runs shmupmametgm as a child process, but TapTracker must be run /after/ shmupmametgm has started. For now, TapTracker only logs stats for player 1.

** Screenshots

UI is a work-in-progress.

| [[screenshot01.png]] | [[screenshot02.png]] |

The top portion graphs the time vs level during the last three sections. Immediately below that is a counter for line clears (singles : doubles : triples : tetrises). Then below that is a input display per level.

Newer versions of TapTracker include a section table that logs section timings and line counts.

[[https://www.youtube.com/watch?v=6sReyaKpt70][Video of TapTracker (without input viewer)]]

[[https://www.youtube.com/watch?v=NTJTRTVM19w][Old Video of BlockTracker]]

** To-do list

- Document TAP states :: I've reverse engineered most of the TGM2+ states (read: I've figured out what they mean), but there are edge cases that still confuse TapTracker.
- [Partially complete] Implement resizable layouts :: TapTracker only supports a single window size and layout right now, and it's difficult to modify.
- Rework OpenGL code :: It's rigid and messy right now. Not to mention it also uses a ton of immediate mode.
- Player 2 support :: Log stats for Player 2 too.
- Diagram Generation :: Create a [[http://fumen.zui.jp/][Fumen]] diagram during play. A prototype (written in Python) can be found in the =autofumen= directory.
- MAME patch for Windows

** Appendix
*** Useful RAM Addresses

All these addresses are for player 1. I still need to double check some of these.

- From a [[http://tetrisconcept.net/wiki/User:Zzymyn#Memory_Addresses][relatively hidden part]] of the TetrisConcept Wiki:

|    Address | Type      | Description                         | Notes           |
|------------+-----------+-------------------------------------+-----------------|
| 0x06064B99 | int8_t    | ARE/Line Clear Delay Time Remaining |                 |
| 0x06064BA8 | uint32_t  | Random Number Generator State       |                 |
| 0x06064BC8 | int32_t   | Score                               |                 |
| 0x06064BE1 | uint8_t   | DAS Counter                         | Can overflow(!) |
| 0x06064BE4 | int32_t   | Total Time                          |                 |
| 0x06064BE8 | int32_t   | Game Time                           |                 |
| 0x06064BF5 | int8_t    | Block State                         |                 |
| 0x06064BF6 | int16_t   | Current Block                       |                 |
| 0x06064BF8 | int16_t   | Next Block                          |                 |
| 0x06064BFC | int16_t   | Current Block X Position            |                 |
| 0x06064C00 | int16_t   | Current Block Y Position            |                 |
| 0x06064C02 | int8_t    | Gravity Left                        |                 |
| 0x06064C04 | int8_t[4] | Block History                       |                 |
| 0x06064C2A | int16_t   | RO Badge Score                      |                 |
| 0x06064C2C | int16_t   | Number of Blocks Rotated            |                 |
| 0x06064C2E | int16_t   | Current Block Rotation Count        |                 |
| 0x06064C34 | int16_t   | Current Block Alive Time            |                 |

- Extra:

|    Address | Type    | Description                  | Notes |
|------------+---------+------------------------------+-------|
| 0x06064BFA | int8_t  | Current Block Rotation State |       |
| 0x06064BBA | int16_t | Player 1 Level               |       |
| 0x06064BEA | int16_t | Player 1 Timer               |       |
| 0x06079378 | int8_t  | Internal Grade               |       |
| 0x06079379 | int8_t  | Internal Grade Points        |       |
| 0x06064BD0 | int8_t  | M-Roll Progress State        |       |
| 0x06066845 | int8_t  | M-Roll Flag                  |       |
| 0x06064C25 | int8_t  | Section Index                |       |

*** Block Indices

| Index | Block |
|-------+-------|
|     2 | I     |
|     3 | Z     |
|     4 | S     |
|     5 | J     |
|     6 | L     |
|     7 | O     |
|     8 | T     |
