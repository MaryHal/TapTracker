* TapTracker
This project aims to log various game data (and inputs) during a game of [[https://en.wikipedia.org/wiki/Tetris:_The_Grand_Master][Tetris: The Grandmaster 2 Plus]] (TGM2p/TGM2+/TAP) when run in an emulator ([[http://mamedev.org/][MAME]]). TapTracker runs alongside the emulator and performs its logging in real-time. This is linux-only for now.

[[https://github.com/sanford1/BlockTracker][BlockTracker]] was my first attempt at this. It was done by interacting with [[https://github.com/scanmem/scanmem][scanmem]] as a child process. Ultimately, this meant every time I started up the game, I had to probe for the memory address holding level data (not unlike someone using [[http://www.cheatengine.org/][cheat-engine]]) then pass the proper memory addresses to BlockTracker. Along the way I wrote quite possibly the worst code I've ever written. Despite being such a small program, it wasn't too pleasant for me to look at and maintain. (There's one upside though: this method was game-agnostic; I could probe any TGM-style game for level data).

In contract, TapTracker takes a more direct route by modifying a version of MAME to output relevant data. Only a single file in the MAME source code has been changed ($MAME/emu/cpuexec.c) and the patch file can be found here at =patch/tgm2p_cpuexec.diff=. This file can be applied via [[http://linux.die.net/man/1/patch][patch]]. Keep in mind that the go-to version of MAME for TGM is a modified version of shmupmame (which in turn is a modded version of MAME). Some info about it can be found [[http://tetrisconcept.net/wiki/Modded_MAME][here]]. The build process on Linux has a couple quirks, so I might write a build guide in the near future.

The patch uses debug functions in MAME, so debug functionality must be enabled with =-debug= or the =-c= switch (enables the cheat engine).

** Building TapTracker

After cloning this repository, retrieve all the submodules:

#+BEGIN_SRC sh
  git submodule update --init --recursive
#+END_SRC

Building this project requires [[https://www.python.org/][python]], [[https://martine.github.io/ninja/][ninja]], and [[http://www.glfw.org/][glfw]]:

#+BEGIN_SRC sh
  python bootstrap.py
  ninja
#+END_SRC

** Running TapTracker

TapTracker no longer runs shmupmametgm as a child process, but TapTracker must be run /after/ shmupmametgm has started.

** Screenshots

UI is a work-in-progress.

| [[screenshot01.png]] | [[screenshot02.png]] |

The top portion graphs the time vs level during the last three sections. Immediately below that is a counter for line clears (singles : doubles : triples : tetrises). Then below that is a input display per level.

[[https://www.youtube.com/watch?v=6sReyaKpt70][Video of TapTracker (without input viewer)]]

[[https://www.youtube.com/watch?v=NTJTRTVM19w][Old Video of BlockTracker]]

** To-do list

- Document TAP states :: I've reverse engineered most of the TGM2+ states (read: I've figured out what they mean), but there are edge cases that still confuse TapTracker.
- Implement resizable layouts :: TapTracker only supports a single window size and layout right now, and it's difficult to modify.
- Rework OpenGL code :: It's rigid and messy right now. Not to mention it also uses a ton of immediate mode.
